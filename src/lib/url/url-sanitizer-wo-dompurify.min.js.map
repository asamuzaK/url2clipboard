{
  "version": 3,
  "sources": ["../bundle_wo_dompurify/mjs/dompurify.js", "../bundle_wo_dompurify/mjs/constant.js", "../bundle_wo_dompurify/mjs/common.js", "../bundle_wo_dompurify/mjs/file-reader.js", "../bundle_wo_dompurify/lib/file/text-chars.json", "../bundle_wo_dompurify/lib/iana/uri-schemes.json", "../bundle_wo_dompurify/mjs/uri-util.js", "../bundle_wo_dompurify/mjs/sanitizer.js"],
  "sourcesContent": ["/**\n * dompurify.js\n */\n\nconst { DOMPurify } = globalThis;\n\nexport {\n  DOMPurify as domPurify\n};\n", "/**\n * constant.js\n */\n\n/* numeric */\nexport const HEX = 16;\nexport const TYPE_FROM = 8;\nexport const TYPE_TO = -1;\n\n/* regexp */\nexport const REG_B64 = /^[\\w+/=-]+$/;\nexport const REG_CHARSET = /^charset=([\\w#&.;-]+)$/;\nexport const REG_DATA_URL = /data:[\\w#&+./;=-]*,/;\nexport const REG_DATA_URL_B64 = /data:[\\w#&+./;=^]*base64,[\\w+/=-]+/i;\nexport const REG_DATA_URL_G = /data:[\\w#&+./;=-]*,[^\\x22]+/g;\nexport const REG_NUM_REF = /&#(x(?:00)?[\\dA-F]{2}|0?\\d{1,3});?/gi;\nexport const REG_MIME_DOM =\n  /^(?:application\\/(?:[\\w#&.;-]+\\+)?x|image\\/svg\\+x|text\\/(?:ht|x))ml;?/;\nexport const REG_MIME_TEXT = /^text\\/[\\w#&.;-]+/;\nexport const REG_SCHEME = /^[a-z][\\da-z+.-]*$/;\nexport const REG_SCHEME_EXT = /^(?:ext|web)\\+[a-z]+$/;\nexport const REG_SCRIPT = /(?:java|vb)script/;\nexport const REG_SCRIPT_BLOB = /(?:java|vb)script|blob/;\nexport const REG_TAG_QUOT = /%(?:22|27|3C|3E)|[\\x22\\x27<>]/;\nexport const REG_URL_ENC = /^%[\\dA-F]{2}$/i;\n", "/**\n * common.js\n */\n\n/* shared */\nimport { TYPE_FROM, TYPE_TO } from './constant.js';\n\n/**\n * get type\n * @param {*} o - object to check\n * @returns {string} - type of object\n */\nexport const getType = o =>\n  Object.prototype.toString.call(o).slice(TYPE_FROM, TYPE_TO);\n\n/**\n * is string\n * @param {*} o - object to check\n * @returns {boolean} - result\n */\nexport const isString = o => typeof o === 'string' || o instanceof String;\n", "/**\n * file-reader.js\n */\n\nconst { FileReader } = globalThis;\n\nexport {\n  FileReader\n};\n", "[7,8,9,10,11,12,13,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n", "[\"aaa\",\"aaas\",\"about\",\"acap\",\"acct\",\"acd\",\"acr\",\"adiumxtra\",\"adt\",\"afp\",\"afs\",\"aim\",\"amss\",\"android\",\"appdata\",\"apt\",\"ar\",\"ark\",\"at\",\"attachment\",\"aw\",\"barion\",\"beshare\",\"bitcoin\",\"bitcoincash\",\"blob\",\"bluetooth\",\"bolo\",\"brid\",\"browserext\",\"cabal\",\"calculator\",\"callto\",\"cap\",\"cast\",\"casts\",\"chrome\",\"chrome-extension\",\"cid\",\"coap\",\"coaps\",\"com-eventbrite-attendee\",\"content\",\"content-type\",\"crid\",\"cstr\",\"cvs\",\"dab\",\"dat\",\"data\",\"dav\",\"dhttp\",\"diaspora\",\"dict\",\"did\",\"dis\",\"dlna-playcontainer\",\"dlna-playsingle\",\"dns\",\"dntp\",\"doi\",\"dpp\",\"drm\",\"dtmi\",\"dtn\",\"dvb\",\"dvx\",\"dweb\",\"ed2k\",\"eid\",\"elsi\",\"embedded\",\"ens\",\"ethereum\",\"example\",\"facetime\",\"feed\",\"feedready\",\"fido\",\"file\",\"finger\",\"first-run-pen-experience\",\"fish\",\"fm\",\"ftp\",\"fuchsia-pkg\",\"geo\",\"gg\",\"git\",\"gitoid\",\"gizmoproject\",\"go\",\"gopher\",\"graph\",\"gtalk\",\"h323\",\"ham\",\"hcap\",\"hcp\",\"hs20\",\"http\",\"https\",\"hxxp\",\"hxxps\",\"hydrazone\",\"hyper\",\"iax\",\"icap\",\"icon\",\"im\",\"imap\",\"info\",\"iotdisco\",\"ipfs\",\"ipn\",\"ipns\",\"ipp\",\"ipps\",\"irc\",\"irc6\",\"ircs\",\"iris\",\"iris.beep\",\"iris.lwz\",\"iris.xpc\",\"iris.xpcs\",\"isostore\",\"itms\",\"jabber\",\"jar\",\"jms\",\"keyparc\",\"lastfm\",\"lbry\",\"ldap\",\"ldaps\",\"leaptofrogans\",\"lid\",\"lorawan\",\"lpa\",\"lvlt\",\"machineProvisioningProgressReporter\",\"magnet\",\"mailto\",\"maps\",\"market\",\"matrix\",\"message\",\"microsoft.windows.camera\",\"microsoft.windows.camera.multipicker\",\"microsoft.windows.camera.picker\",\"mid\",\"mms\",\"mongodb\",\"moz\",\"moz-extension\",\"ms-access\",\"ms-appinstaller\",\"ms-browser-extension\",\"ms-calculator\",\"ms-drive-to\",\"ms-enrollment\",\"ms-excel\",\"ms-eyecontrolspeech\",\"ms-gamebarservices\",\"ms-gamingoverlay\",\"ms-getoffice\",\"ms-help\",\"ms-infopath\",\"ms-inputapp\",\"ms-launchremotedesktop\",\"ms-lockscreencomponent-config\",\"ms-media-stream-id\",\"ms-meetnow\",\"ms-mixedrealitycapture\",\"ms-mobileplans\",\"ms-newsandinterests\",\"ms-officeapp\",\"ms-people\",\"ms-personacard\",\"ms-powerpoint\",\"ms-project\",\"ms-publisher\",\"ms-recall\",\"ms-remotedesktop\",\"ms-remotedesktop-launch\",\"ms-restoretabcompanion\",\"ms-screenclip\",\"ms-screensketch\",\"ms-search\",\"ms-search-repair\",\"ms-secondary-screen-controller\",\"ms-secondary-screen-setup\",\"ms-settings\",\"ms-settings-airplanemode\",\"ms-settings-bluetooth\",\"ms-settings-camera\",\"ms-settings-cellular\",\"ms-settings-cloudstorage\",\"ms-settings-connectabledevices\",\"ms-settings-displays-topology\",\"ms-settings-emailandaccounts\",\"ms-settings-language\",\"ms-settings-location\",\"ms-settings-lock\",\"ms-settings-nfctransactions\",\"ms-settings-notifications\",\"ms-settings-power\",\"ms-settings-privacy\",\"ms-settings-proximity\",\"ms-settings-screenrotation\",\"ms-settings-wifi\",\"ms-settings-workplace\",\"ms-spd\",\"ms-stickers\",\"ms-sttoverlay\",\"ms-transit-to\",\"ms-useractivityset\",\"ms-virtualtouchpad\",\"ms-visio\",\"ms-walk-to\",\"ms-whiteboard\",\"ms-whiteboard-cmd\",\"ms-word\",\"msnim\",\"msrp\",\"msrps\",\"mss\",\"mt\",\"mtqp\",\"mumble\",\"mupdate\",\"mvn\",\"mvrp\",\"mvrps\",\"news\",\"nfs\",\"ni\",\"nih\",\"nntp\",\"notes\",\"num\",\"ocf\",\"oid\",\"onenote\",\"onenote-cmd\",\"opaquelocktoken\",\"openid\",\"openpgp4fpr\",\"otpauth\",\"palm\",\"paparazzi\",\"payto\",\"pkcs11\",\"platform\",\"pop\",\"pres\",\"proxy\",\"psyc\",\"pttp\",\"pwid\",\"qb\",\"query\",\"quic-transport\",\"redis\",\"rediss\",\"reload\",\"res\",\"resource\",\"rmi\",\"rsync\",\"rtmfp\",\"rtmp\",\"rtsp\",\"rtsps\",\"rtspu\",\"sarif\",\"secondlife\",\"secret-token\",\"service\",\"session\",\"sftp\",\"sgn\",\"shc\",\"shelter\",\"sieve\",\"simpleledger\",\"simplex\",\"sip\",\"sips\",\"skype\",\"smb\",\"smp\",\"sms\",\"smtp\",\"snmp\",\"soap.beep\",\"soap.beeps\",\"soldat\",\"spiffe\",\"spotify\",\"ssb\",\"ssh\",\"starknet\",\"steam\",\"stun\",\"stuns\",\"submit\",\"svn\",\"swh\",\"swid\",\"swidpath\",\"tag\",\"taler\",\"teamspeak\",\"tel\",\"teliaeid\",\"telnet\",\"tftp\",\"things\",\"thismessage\",\"tip\",\"tn3270\",\"tool\",\"turn\",\"turns\",\"tv\",\"udp\",\"unreal\",\"urn\",\"ut2004\",\"uuid-in-package\",\"v-event\",\"vemmi\",\"ventrilo\",\"ves\",\"view-source\",\"vnc\",\"vscode\",\"vscode-insiders\",\"vsls\",\"w3\",\"wcr\",\"web3\",\"webcal\",\"wifi\",\"ws\",\"wss\",\"wtai\",\"wyciwyg\",\"xcon\",\"xcon-userid\",\"xfire\",\"xftp\",\"xmlrpc.beep\",\"xmlrpc.beeps\",\"xmpp\",\"xrcp\",\"xri\",\"ymsgr\",\"z39.50r\",\"z39.50s\"]\n", "/**\n * uri-util.js\n */\n\n/* shared */\nimport { getType, isString } from './common.js';\nimport { FileReader } from './file-reader.js';\nimport { textChars, uriSchemes } from './lib-util.js';\n\nimport {\n  HEX, REG_B64, REG_NUM_REF, REG_SCHEME, REG_SCHEME_EXT, REG_SCRIPT, REG_URL_ENC\n} from './constant.js';\n\n/**\n * get URL encoded string\n * @param {string} str - string\n * @returns {string} - URL encoded string\n */\nexport const getURLEncodedString = str => {\n  if (!isString(str)) {\n    throw new TypeError(`Expected String but got ${getType(str)}.`);\n  }\n  const chars = [];\n  for (const ch of str) {\n    chars.push(`%${ch.charCodeAt(0).toString(HEX).toUpperCase()}`);\n  }\n  return chars.join('');\n};\n\n/**\n * escape URL encoded HTML special chars\n * @param {string} ch - URL encoded (percent encoded) char\n * @returns {string} - escaped URL encoded HTML special char / URL encoded char\n */\nexport const escapeURLEncodedHTMLChars = ch => {\n  if (isString(ch) && REG_URL_ENC.test(ch)) {\n    ch = ch.toUpperCase();\n  }\n  const [amp, num, lt, gt, quot, apos] =\n    ['&', '#', '<', '>', '\"', \"'\"].map(getURLEncodedString);\n  let escapedChar;\n  if (ch === amp) {\n    escapedChar = `${amp}amp;`;\n  } else if (ch === lt) {\n    escapedChar = `${amp}lt;`;\n  } else if (ch === gt) {\n    escapedChar = `${amp}gt;`;\n  } else if (ch === quot) {\n    escapedChar = `${amp}quot;`;\n  } else if (ch === apos) {\n    escapedChar = `${amp}${num}39;`;\n  } else {\n    escapedChar = ch;\n  }\n  return escapedChar;\n};\n\n/**\n * parse base64 encoded data\n * @param {string} data - base64 encoded data\n * @returns {string} - parsed text data / base64 encoded data if binary\n */\nexport const parseBase64 = data => {\n  if (!isString(data)) {\n    throw new TypeError(`Expected String but got ${getType(data)}.`);\n  } else if (!REG_B64.test(data)) {\n    throw new Error(`Invalid base64 data: ${data}`);\n  }\n  const bin = atob(data);\n  const uint8arr = Uint8Array.from([...bin].map(c => c.charCodeAt(0)));\n  const textCharCodes = new Set(textChars);\n  let parsedData;\n  if (uint8arr.every(c => textCharCodes.has(c))) {\n    parsedData = bin.replace(/\\s/g, getURLEncodedString);\n  } else {\n    parsedData = data;\n  }\n  return parsedData;\n};\n\n/**\n * parse URL encoded numeric character references in the range 0x00 to 0xFF\n * @param {string} str - string\n * @param {number} [nest] - nest level\n * @returns {string} - parsed string\n */\nexport const parseURLEncodedNumCharRef = (str, nest = 0) => {\n  if (!isString(str)) {\n    throw new TypeError(`Expected String but got ${getType(str)}.`);\n  }\n  if (!Number.isInteger(nest)) {\n    throw new TypeError(`Expected Number but got ${getType(nest)}.`);\n  } else if (nest > HEX) {\n    throw new Error('Character references nested too deeply.');\n  }\n  let res = decodeURIComponent(str);\n  if (/&#/.test(res)) {\n    const textCharCodes = new Set(textChars);\n    const items = [...res.matchAll(REG_NUM_REF)].reverse();\n    for (const item of items) {\n      const [numCharRef, value] = item;\n      let num;\n      if (/^x[\\dA-F]+/i.test(value)) {\n        num = parseInt(`0${value}`, HEX);\n      } else if (/^\\d+/.test(value)) {\n        num = parseInt(value);\n      }\n      if (Number.isInteger(num)) {\n        const { index } = item;\n        const [preNum, postNum] = [\n          res.substring(0, index),\n          res.substring(index + numCharRef.length)\n        ];\n        if (textCharCodes.has(num)) {\n          res = `${preNum}${String.fromCharCode(num)}${postNum}`;\n          if (/#x?$/.test(preNum) || /^#(?:x(?:00)?[2-7]|\\d)/.test(postNum)) {\n            res = parseURLEncodedNumCharRef(res, ++nest);\n          }\n        } else if (num < HEX * HEX) {\n          res = `${preNum}${postNum}`;\n        }\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * create data URL from blob\n * @param {object} blob - blob\n * @returns {Promise.<?string>} - data URL\n */\nexport const createDataURLFromBlob = blob => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.addEventListener('error', () => reject(reader.error));\n  reader.addEventListener('abort', () => resolve(reader.result));\n  reader.addEventListener('load', () => resolve(reader.result));\n  reader.readAsDataURL(blob);\n});\n\n/**\n * URI schemes\n */\nexport class URISchemes {\n  /* private fields */\n  #schemes;\n\n  /**\n   * construct\n   */\n  constructor() {\n    this.#schemes = new Set(uriSchemes);\n  }\n\n  /**\n   * get schemes\n   * @see {@link https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml}\n   *      - Historical schemes omitted\n   *      - 'moz-extension' scheme added\n   * @returns {Array.<string>} - array of schemes\n   */\n  get() {\n    return [...this.#schemes];\n  }\n\n  /**\n   * has scheme\n   * @param {string} scheme - scheme\n   * @returns {boolean} - result\n   */\n  has(scheme) {\n    return this.#schemes.has(scheme);\n  }\n\n  /**\n   * add scheme\n   * NOTE: `javascript` and/or `vbscript` schemes can not be registered\n   * @param {string} scheme - scheme\n   * @returns {Array.<string>} - array of schemes\n   */\n  add(scheme) {\n    if (!isString(scheme)) {\n      throw new TypeError(`Expected String but got ${getType(scheme)}.`);\n    } else if (REG_SCRIPT.test(scheme) || !REG_SCHEME.test(scheme)) {\n      throw new Error(`Invalid scheme: ${scheme}`);\n    }\n    this.#schemes.add(scheme);\n    return [...this.#schemes];\n  }\n\n  /**\n   * remove scheme\n   * @param {string} scheme - scheme\n   * @returns {boolean} - result\n   */\n  remove(scheme) {\n    return this.#schemes.delete(scheme);\n  }\n\n  /**\n   * verify URI\n   * @param {string} uri - URI\n   * @returns {boolean} - result\n   */\n  verify(uri) {\n    let res;\n    if (isString(uri)) {\n      try {\n        const { protocol } = new URL(uri);\n        const scheme = protocol.replace(/:$/, '');\n        const schemeParts = scheme.split('+');\n        res = (!REG_SCRIPT.test(scheme) && REG_SCHEME_EXT.test(scheme)) ||\n              schemeParts.every(s => this.#schemes.has(s));\n      } catch (e) {\n        res = false;\n      }\n    }\n    return !!res;\n  }\n\n  /**\n   * reset schemes\n   * @returns {void}\n   */\n  reset() {\n    this.#schemes.clear();\n    for (const scheme of uriSchemes) {\n      this.#schemes.add(scheme);\n    }\n  }\n}\n", "/**\n * sanitizer.js\n */\n\n/* shared */\nimport { domPurify } from './dompurify.js';\nimport { getType, isString } from './common.js';\nimport {\n  createDataURLFromBlob, escapeURLEncodedHTMLChars, parseBase64,\n  parseURLEncodedNumCharRef, URISchemes\n} from './uri-util.js';\nimport {\n  HEX, REG_DATA_URL, REG_DATA_URL_B64, REG_DATA_URL_G, REG_MIME_DOM,\n  REG_SCRIPT_BLOB, REG_TAG_QUOT\n} from './constant.js';\n\n/* typedef */\n/**\n * @typedef {object} ParsedURL - object with additional props based on URL API\n * @property {string} input - URL input\n * @property {boolean} valid - is valid URI\n * @property {object} [data] - parsed result of data URL, `null`able\n * @property {string} [data.mime] - MIME type\n * @property {boolean} [data.base64] - is base64 encoded\n * @property {string} [data.data] - data part of the data URL\n * @property {string} [href] - sanitized URL input\n * @property {string} [origin] - scheme, domain and port of the sanitized URL\n * @property {string} [protocol] - protocol scheme of the sanitized URL\n * @property {string} [username] - username specified before the domain name\n * @property {string} [password] - password specified before the domain name\n * @property {string} [host] - domain and port of the sanitized URL\n * @property {string} [hostname] - domain of the sanitized URL\n * @property {string} [port] - port number of the sanitized URL\n * @property {string} [pathname] - path of the sanitized URL\n * @property {string} [search] - query string of the sanitized URL\n * @property {string} [hash] - fragment identifier of the sanitized URL\n */\n\n/**\n * URL sanitizer\n */\nexport class URLSanitizer extends URISchemes {\n  /* private fields */\n  #nest;\n  #recurse;\n\n  /**\n   * construct\n   */\n  constructor() {\n    super();\n    this.#nest = 0;\n    this.#recurse = new Set();\n  }\n\n  /**\n   * replace matched data URLs\n   * @param {string} data - data URL\n   * @returns {string} - replaced data URL\n   */\n  replace(data) {\n    if (!isString(data)) {\n      throw new TypeError(`Expected String but got ${getType(data)}.`);\n    }\n    let replacedData = data;\n    if (REG_DATA_URL.test(replacedData)) {\n      const matchedDataUrls = replacedData.matchAll(REG_DATA_URL_G);\n      const items = [...matchedDataUrls].reverse();\n      for (const item of items) {\n        let [dataUrl] = item;\n        if (REG_DATA_URL_B64.test(dataUrl)) {\n          [dataUrl] = REG_DATA_URL_B64.exec(dataUrl);\n        }\n        this.#nest++;\n        this.#recurse.add(dataUrl);\n        const parsedDataUrl = this.sanitize(dataUrl, {\n          allow: ['data']\n        });\n        const { index } = item;\n        const [preDataUrl, postDataUrl] = [\n          replacedData.substring(0, index),\n          replacedData.substring(index + dataUrl.length)\n        ];\n        if (parsedDataUrl) {\n          replacedData = `${preDataUrl}${parsedDataUrl}${postDataUrl}`;\n        } else {\n          replacedData = `${preDataUrl}${postDataUrl}`;\n        }\n      }\n    }\n    return replacedData;\n  }\n\n  /**\n   * purify URL encoded DOM\n   * @param {string} dom - DOM string\n   * @returns {string} - purified DOM string\n   */\n  purify(dom) {\n    if (!isString(dom)) {\n      throw new TypeError(`Expected String but got ${getType(dom)}.`);\n    }\n    let purifiedDom = domPurify.sanitize(decodeURIComponent(dom));\n    if (purifiedDom && REG_DATA_URL.test(purifiedDom)) {\n      purifiedDom = this.replace(purifiedDom);\n    }\n    purifiedDom = purifiedDom.replace(/(?:#|%23)$/, '')\n      .replace(/(?<!(?:#|%23).*)(?:\\?|%3F)$/, '');\n    return encodeURI(purifiedDom);\n  }\n\n  /**\n   * sanitize URL\n   * NOTE: `data` and `file` schemes must be explicitly allowed\n   * `blob` URLs should be converted to `data` URLs\n   * `javascript` and `vbscript` schemes can not be allowed\n   * @param {string} url - URL\n   * @param {object} [opt] - options\n   * @param {Array.<string>} [opt.allow] - array of allowed schemes\n   * @param {Array.<string>} [opt.deny] - array of denied schemes\n   * @param {Array.<string>} [opt.only] - array of specific schemes to allow\n   * @returns {?string} - sanitized URL\n   */\n  sanitize(url, opt) {\n    if (this.#nest > HEX) {\n      this.#nest = 0;\n      throw new Error('Data URLs nested too deeply.');\n    }\n    const { allow, deny, only } = opt ?? {};\n    const schemeMap = new Map([\n      ['blob', false],\n      ['data', false],\n      ['file', false],\n      ['javascrpt', false],\n      ['vbscript', false]\n    ]);\n    const tempScheme = new Set();\n    let restrictScheme = false;\n    if (Array.isArray(only) && only.length) {\n      const schemes = super.get();\n      for (const item of schemes) {\n        schemeMap.set(item, false);\n      }\n      const items = Object.values(only);\n      for (let item of items) {\n        if (isString(item)) {\n          item = item.trim();\n          if (!REG_SCRIPT_BLOB.test(item)) {\n            if (super.has(item)) {\n              schemeMap.set(item, true);\n            } else {\n              try {\n                super.add(item);\n              } catch (e) {\n                // fall through\n              }\n              if (super.has(item)) {\n                schemeMap.set(item, true);\n                tempScheme.add(item);\n              }\n            }\n            if (!restrictScheme && schemeMap.has(item)) {\n              restrictScheme = schemeMap.get(item);\n            }\n          }\n        }\n      }\n    } else {\n      if (Array.isArray(allow) && allow.length) {\n        const items = Object.values(allow);\n        for (let item of items) {\n          if (isString(item)) {\n            item = item.trim();\n            if (!REG_SCRIPT_BLOB.test(item)) {\n              if (super.has(item)) {\n                schemeMap.set(item, true);\n              } else {\n                try {\n                  super.add(item);\n                } catch (e) {\n                  // fall through\n                }\n                if (super.has(item)) {\n                  schemeMap.set(item, true);\n                  tempScheme.add(item);\n                }\n              }\n            }\n          }\n        }\n      }\n      if (Array.isArray(deny) && deny.length) {\n        const items = Object.values(deny);\n        for (let item of items) {\n          if (isString(item)) {\n            item = item.trim();\n            if (item) {\n              schemeMap.set(item, false);\n            }\n          }\n        }\n      }\n    }\n    let sanitizedUrl;\n    if (super.verify(url)) {\n      const { hash, href, pathname, protocol, search } = new URL(url);\n      const scheme = protocol.replace(/:$/, '');\n      const schemeParts = scheme.split('+');\n      let bool;\n      if (restrictScheme) {\n        bool = schemeParts.every(s => schemeMap.get(s));\n      } else {\n        for (const [key, value] of schemeMap.entries()) {\n          bool = value || (scheme !== key && schemeParts.every(s => s !== key));\n          if (!bool) {\n            break;\n          }\n        }\n      }\n      if (bool) {\n        const isDataUrl = schemeParts.includes('data');\n        let finalize;\n        let urlToSanitize = href;\n        if (isDataUrl) {\n          const [mediaType, ...dataParts] = pathname.split(',');\n          const data = `${dataParts.join(',')}${search}${hash}`;\n          const mediaTypes = mediaType.split(';');\n          const isBase64 = mediaTypes[mediaTypes.length - 1] === 'base64';\n          let parsedData = data;\n          if (isBase64) {\n            parsedData = parseBase64(data);\n          }\n          try {\n            const decodedData = parseURLEncodedNumCharRef(parsedData).trim();\n            const { protocol: dataScheme } = new URL(decodedData);\n            const dataSchemeParts = dataScheme.replace(/:$/, '').split('+');\n            if (dataSchemeParts.some(s => REG_SCRIPT_BLOB.test(s))) {\n              urlToSanitize = '';\n            }\n          } catch (e) {\n            // fall through\n          }\n          const containsDataUrl = REG_DATA_URL.test(parsedData);\n          if (parsedData !== data || containsDataUrl) {\n            if (containsDataUrl) {\n              parsedData = this.replace(parsedData);\n            } else if (this.#recurse.has(url)) {\n              this.#recurse.delete(url);\n            } else {\n              finalize = true;\n            }\n          } else if (this.#recurse.has(url)) {\n            this.#recurse.delete(url);\n          } else {\n            finalize = true;\n          }\n          if (!mediaType || REG_MIME_DOM.test(mediaType)) {\n            parsedData = this.purify(parsedData);\n          }\n          if (urlToSanitize && parsedData) {\n            if (isBase64 && parsedData !== data) {\n              mediaTypes.pop();\n            }\n            urlToSanitize = `${scheme}:${mediaTypes.join(';')},${parsedData}`;\n          } else {\n            urlToSanitize = '';\n          }\n        } else {\n          finalize = true;\n        }\n        if (!isDataUrl && REG_TAG_QUOT.test(urlToSanitize)) {\n          const item = REG_TAG_QUOT.exec(urlToSanitize);\n          const { index } = item;\n          urlToSanitize =\n            urlToSanitize.substring(0, index).replace(/[?&]$/, '');\n        }\n        if (urlToSanitize) {\n          sanitizedUrl =\n            urlToSanitize.replace(/%26/g, escapeURLEncodedHTMLChars);\n          if (finalize) {\n            this.#nest = 0;\n          }\n        } else {\n          this.#nest = 0;\n        }\n      }\n      if (tempScheme.size) {\n        tempScheme.forEach(item => {\n          super.remove(item);\n        });\n      }\n    }\n    return sanitizedUrl || null;\n  }\n\n  /**\n   * parse sanitized URL\n   * @param {string} url - URL\n   * @param {object} [opt] - options\n   * @param {Array.<string>} [opt.allow] - array of allowed schemes\n   * @param {Array.<string>} [opt.deny] - array of denied schemes\n   * @param {Array.<string>} [opt.only] - array of specific schemes to allow\n   * @returns {ParsedURL} - result with additional props based on URL API\n   */\n  parse(url, opt) {\n    if (!isString(url)) {\n      throw new TypeError(`Expected String but got ${getType(url)}.`);\n    }\n    const parsedUrl = new Map([\n      ['input', url]\n    ]);\n    let sanitizedUrl;\n    if (this.verify(url)) {\n      const { protocol } = new URL(url);\n      if (protocol === 'blob:') {\n        sanitizedUrl = url;\n      } else {\n        sanitizedUrl = this.sanitize(url, opt ?? {\n          allow: ['data', 'file']\n        });\n      }\n    }\n    if (sanitizedUrl) {\n      const urlObj = new URL(sanitizedUrl);\n      const { pathname, protocol } = urlObj;\n      const schemeParts = protocol.replace(/:$/, '').split('+');\n      const isDataUrl = schemeParts.includes('data');\n      parsedUrl.set('valid', true);\n      if (isDataUrl) {\n        const dataUrl = new Map();\n        const [mediaType, ...dataParts] = pathname.split(',');\n        const data = `${dataParts.join(',')}`;\n        const mediaTypes = mediaType.split(';');\n        const isBase64 = mediaTypes[mediaTypes.length - 1] === 'base64';\n        if (isBase64) {\n          mediaTypes.pop();\n        }\n        dataUrl.set('mime', mediaTypes.join(';'));\n        dataUrl.set('base64', isBase64);\n        dataUrl.set('data', data);\n        parsedUrl.set('data', Object.fromEntries(dataUrl));\n      } else {\n        parsedUrl.set('data', null);\n      }\n      for (const key in urlObj) {\n        const value = urlObj[key];\n        if (isString(value)) {\n          parsedUrl.set(key, value);\n        }\n      }\n    } else {\n      parsedUrl.set('valid', false);\n    }\n    return Object.fromEntries(parsedUrl);\n  }\n\n  /**\n   * reset sanitizer\n   * @returns {void}\n   */\n  reset() {\n    super.reset();\n    this.#nest = 0;\n    this.#recurse.clear();\n  }\n}\n\n/* aliases and async wrappers */\n/* instance */\nconst urlSanitizer = new URLSanitizer();\n\n/**\n * sanitize URL async\n * NOTE: `blob`, `data` and `file` schemes must be explicitly allowed\n * given a `blob` URL, returns a sanitized `data` URL\n * @param {string} url - URL\n * @param {object} [opt] - options\n * @param {Array.<string>} [opt.allow] - array of allowed schemes\n * @param {Array.<string>} [opt.deny] - array of denied schemes\n * @param {Array.<string>} [opt.only] - array of specific schemes to allow\n * @returns {Promise.<?string>} - sanitized URL\n */\nexport const sanitizeURL = async (url, opt = {\n  allow: [],\n  deny: [],\n  only: []\n}) => {\n  let res;\n  if (url && isString(url)) {\n    let scheme;\n    try {\n      const { protocol } = new URL(url);\n      scheme = protocol.replace(/:$/, '');\n    } catch (e) {\n      // fall through;\n    }\n    if (scheme === 'blob') {\n      const { allow, deny, only } = opt;\n      if ((Array.isArray(allow) && allow.includes('blob') &&\n           !(Array.isArray(deny) && deny.includes('blob'))) ||\n          (Array.isArray(only) && only.includes('blob'))) {\n        let data;\n        try {\n          data =\n            await fetch(url).then(r => r.blob()).then(createDataURLFromBlob);\n        } catch (e) {\n          // fall through\n        }\n        if (data) {\n          if (Array.isArray(only)) {\n            if (!only.includes('data')) {\n              only.push('data');\n            }\n          } else if (Array.isArray(allow)) {\n            if (!allow.includes('data')) {\n              allow.push('data');\n            }\n            if (Array.isArray(deny) && deny.includes('data')) {\n              const i = deny.indexOf('data');\n              deny.splice(i, 1);\n            }\n          }\n          res = urlSanitizer.sanitize(data, opt);\n        }\n      }\n      URL.revokeObjectURL(url);\n    } else if (scheme) {\n      res = urlSanitizer.sanitize(url, opt);\n    }\n  }\n  return res || null;\n};\n\n/**\n * sanitize URL sync\n * NOTE: `data` and `file` schemes must be explicitly allowed\n * `blob` scheme returns `null`\n * @param {string} url - URL\n * @param {object} [opt] - options\n * @param {Array.<string>} [opt.allow] - array of allowed schemes\n * @param {Array.<string>} [opt.deny] - array of denied schemes\n * @param {Array.<string>} [opt.only] - array of specific schemes to allow\n * @returns {?string} - sanitized URL\n */\nexport const sanitizeURLSync = (url, opt) => {\n  let res;\n  if (url && isString(url)) {\n    let scheme;\n    try {\n      const { protocol } = new URL(url);\n      scheme = protocol.replace(/:$/, '');\n    } catch (e) {\n      // fall through;\n    }\n    if (scheme === 'blob') {\n      URL.revokeObjectURL(url);\n    } else if (scheme) {\n      res = urlSanitizer.sanitize(url, opt);\n    }\n  }\n  return res || null;\n};\n\n/**\n * parse URL async\n * @param {string} url - URL\n * @returns {Promise.<ParsedURL>} - result\n */\nexport const parseURL = async url => {\n  const res = urlSanitizer.parse(url);\n  return res;\n};\n\n/**\n * parse URL sync\n * @param {string} url - URL\n * @returns {ParsedURL} - result\n */\nexport const parseURLSync = url => urlSanitizer.parse(url);\n\n/**\n * is URI async\n * @param {string} uri - URI\n * @returns {Promise.<boolean>} - result\n */\nexport const isURI = async uri => {\n  const res = urlSanitizer.verify(uri);\n  return res;\n};\n\n/**\n * is URI sync\n * @param {string} uri - URI\n * @returns {boolean} - result\n */\nexport const isURISync = uri => urlSanitizer.verify(uri);\n\n/* export instance */\nexport default urlSanitizer;\n"],
  "mappings": "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",
  "names": ["DOMPurify", "REG_B64", "REG_DATA_URL", "REG_DATA_URL_B64", "REG_DATA_URL_G", "REG_NUM_REF", "REG_MIME_DOM", "REG_SCHEME", "REG_SCHEME_EXT", "REG_SCRIPT", "REG_SCRIPT_BLOB", "REG_TAG_QUOT", "REG_URL_ENC", "getType", "o", "isString", "FileReader", "text_chars_default", "uri_schemes_default", "getURLEncodedString", "str", "isString", "getType", "chars", "ch", "escapeURLEncodedHTMLChars", "REG_URL_ENC", "amp", "num", "lt", "gt", "quot", "apos", "escapedChar", "parseBase64", "data", "REG_B64", "bin", "uint8arr", "c", "textCharCodes", "text_chars_default", "parsedData", "parseURLEncodedNumCharRef", "nest", "res", "items", "REG_NUM_REF", "item", "numCharRef", "value", "index", "preNum", "postNum", "createDataURLFromBlob", "blob", "resolve", "reject", "reader", "FileReader", "URISchemes", "#schemes", "uri_schemes_default", "scheme", "REG_SCRIPT", "REG_SCHEME", "uri", "protocol", "schemeParts", "REG_SCHEME_EXT", "s", "URLSanitizer", "URISchemes", "#nest", "#recurse", "data", "isString", "getType", "replacedData", "REG_DATA_URL", "items", "REG_DATA_URL_G", "item", "dataUrl", "REG_DATA_URL_B64", "parsedDataUrl", "index", "preDataUrl", "postDataUrl", "dom", "purifiedDom", "DOMPurify", "url", "opt", "allow", "deny", "only", "schemeMap", "tempScheme", "restrictScheme", "schemes", "REG_SCRIPT_BLOB", "sanitizedUrl", "hash", "href", "pathname", "protocol", "search", "scheme", "schemeParts", "bool", "s", "key", "value", "isDataUrl", "finalize", "urlToSanitize", "mediaType", "dataParts", "mediaTypes", "isBase64", "parsedData", "parseBase64", "decodedData", "parseURLEncodedNumCharRef", "dataScheme", "containsDataUrl", "REG_MIME_DOM", "REG_TAG_QUOT", "escapeURLEncodedHTMLChars", "parsedUrl", "urlObj", "urlSanitizer", "sanitizeURL", "res", "r", "createDataURLFromBlob", "i", "sanitizeURLSync", "parseURL", "parseURLSync", "isURI", "uri", "isURISync", "sanitizer_default"]
}
