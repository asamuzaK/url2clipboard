{
  "version": 3,
  "sources": ["../bundle_wo_dompurify/mjs/dompurify.js", "../bundle_wo_dompurify/mjs/common.js", "../bundle_wo_dompurify/lib/file/text-chars.json", "../bundle_wo_dompurify/lib/iana/uri-schemes.json", "../bundle_wo_dompurify/mjs/file-reader.js", "../bundle_wo_dompurify/mjs/uri-util.js", "../bundle_wo_dompurify/mjs/sanitizer.js"],
  "sourcesContent": ["/**\n * dompurify.js\n */\n\nconst { DOMPurify } = window;\n\nexport {\n  DOMPurify as default\n};\n", "/**\n * common.js\n */\n\n/* constants */\nconst TYPE_FROM = 8;\nconst TYPE_TO = -1;\n\n/**\n * get type\n *\n * @param {*} o - object to check\n * @returns {string} - type of object\n */\nexport const getType = o =>\n  Object.prototype.toString.call(o).slice(TYPE_FROM, TYPE_TO);\n\n/**\n * is string\n *\n * @param {*} o - object to check\n * @returns {boolean} - result\n */\nexport const isString = o => typeof o === 'string' || o instanceof String;\n", "[7,8,9,10,11,12,13,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n", "[\"aaa\",\"aaas\",\"about\",\"acap\",\"acct\",\"acd\",\"acr\",\"adiumxtra\",\"adt\",\"afp\",\"afs\",\"aim\",\"amss\",\"android\",\"appdata\",\"apt\",\"ar\",\"ark\",\"attachment\",\"aw\",\"barion\",\"beshare\",\"bitcoin\",\"bitcoincash\",\"blob\",\"bolo\",\"browserext\",\"cabal\",\"calculator\",\"callto\",\"cap\",\"cast\",\"casts\",\"chrome\",\"chrome-extension\",\"cid\",\"coap\",\"coaps\",\"com-eventbrite-attendee\",\"content\",\"content-type\",\"crid\",\"cstr\",\"cvs\",\"dab\",\"dat\",\"data\",\"dav\",\"diaspora\",\"dict\",\"did\",\"dis\",\"dlna-playcontainer\",\"dlna-playsingle\",\"dns\",\"dntp\",\"doi\",\"dpp\",\"drm\",\"dtmi\",\"dtn\",\"dvb\",\"dvx\",\"dweb\",\"ed2k\",\"eid\",\"elsi\",\"embedded\",\"ens\",\"ethereum\",\"example\",\"facetime\",\"feed\",\"feedready\",\"fido\",\"file\",\"finger\",\"first-run-pen-experience\",\"fish\",\"fm\",\"ftp\",\"fuchsia-pkg\",\"geo\",\"gg\",\"git\",\"gitoid\",\"gizmoproject\",\"go\",\"gopher\",\"graph\",\"gtalk\",\"h323\",\"ham\",\"hcap\",\"hcp\",\"http\",\"https\",\"hxxp\",\"hxxps\",\"hydrazone\",\"hyper\",\"iax\",\"icap\",\"icon\",\"im\",\"imap\",\"info\",\"iotdisco\",\"ipfs\",\"ipn\",\"ipns\",\"ipp\",\"ipps\",\"irc\",\"irc6\",\"ircs\",\"iris\",\"iris.beep\",\"iris.lwz\",\"iris.xpc\",\"iris.xpcs\",\"isostore\",\"itms\",\"jabber\",\"jar\",\"jms\",\"keyparc\",\"lastfm\",\"lbry\",\"ldap\",\"ldaps\",\"leaptofrogans\",\"lorawan\",\"lpa\",\"lvlt\",\"magnet\",\"mailto\",\"maps\",\"market\",\"matrix\",\"message\",\"microsoft.windows.camera\",\"microsoft.windows.camera.multipicker\",\"microsoft.windows.camera.picker\",\"mid\",\"mms\",\"mongodb\",\"moz\",\"moz-extension\",\"ms-access\",\"ms-appinstaller\",\"ms-browser-extension\",\"ms-calculator\",\"ms-drive-to\",\"ms-enrollment\",\"ms-excel\",\"ms-eyecontrolspeech\",\"ms-gamebarservices\",\"ms-gamingoverlay\",\"ms-getoffice\",\"ms-help\",\"ms-infopath\",\"ms-inputapp\",\"ms-lockscreencomponent-config\",\"ms-media-stream-id\",\"ms-meetnow\",\"ms-mixedrealitycapture\",\"ms-mobileplans\",\"ms-newsandinterests\",\"ms-officeapp\",\"ms-people\",\"ms-powerpoint\",\"ms-project\",\"ms-publisher\",\"ms-remotedesktop-launch\",\"ms-restoretabcompanion\",\"ms-screenclip\",\"ms-screensketch\",\"ms-search\",\"ms-search-repair\",\"ms-secondary-screen-controller\",\"ms-secondary-screen-setup\",\"ms-settings\",\"ms-settings-airplanemode\",\"ms-settings-bluetooth\",\"ms-settings-camera\",\"ms-settings-cellular\",\"ms-settings-cloudstorage\",\"ms-settings-connectabledevices\",\"ms-settings-displays-topology\",\"ms-settings-emailandaccounts\",\"ms-settings-language\",\"ms-settings-location\",\"ms-settings-lock\",\"ms-settings-nfctransactions\",\"ms-settings-notifications\",\"ms-settings-power\",\"ms-settings-privacy\",\"ms-settings-proximity\",\"ms-settings-screenrotation\",\"ms-settings-wifi\",\"ms-settings-workplace\",\"ms-spd\",\"ms-stickers\",\"ms-sttoverlay\",\"ms-transit-to\",\"ms-useractivityset\",\"ms-virtualtouchpad\",\"ms-visio\",\"ms-walk-to\",\"ms-whiteboard\",\"ms-whiteboard-cmd\",\"ms-word\",\"msnim\",\"msrp\",\"msrps\",\"mss\",\"mt\",\"mtqp\",\"mumble\",\"mupdate\",\"mvn\",\"news\",\"nfs\",\"ni\",\"nih\",\"nntp\",\"notes\",\"num\",\"ocf\",\"oid\",\"onenote\",\"onenote-cmd\",\"opaquelocktoken\",\"openpgp4fpr\",\"otpauth\",\"palm\",\"paparazzi\",\"payment\",\"payto\",\"pkcs11\",\"platform\",\"pop\",\"pres\",\"proxy\",\"psyc\",\"pttp\",\"pwid\",\"qb\",\"query\",\"quic-transport\",\"redis\",\"rediss\",\"reload\",\"res\",\"resource\",\"rmi\",\"rsync\",\"rtmfp\",\"rtmp\",\"rtsp\",\"rtsps\",\"rtspu\",\"sarif\",\"secondlife\",\"secret-token\",\"service\",\"session\",\"sftp\",\"sgn\",\"shc\",\"sieve\",\"simpleledger\",\"simplex\",\"sip\",\"sips\",\"skype\",\"smb\",\"smp\",\"sms\",\"smtp\",\"snmp\",\"soap.beep\",\"soap.beeps\",\"soldat\",\"spiffe\",\"spotify\",\"ssb\",\"ssh\",\"starknet\",\"steam\",\"stun\",\"stuns\",\"submit\",\"svn\",\"swh\",\"swid\",\"swidpath\",\"tag\",\"taler\",\"teamspeak\",\"tel\",\"teliaeid\",\"telnet\",\"tftp\",\"things\",\"thismessage\",\"tip\",\"tn3270\",\"tool\",\"turn\",\"turns\",\"tv\",\"udp\",\"unreal\",\"urn\",\"ut2004\",\"uuid-in-package\",\"v-event\",\"vemmi\",\"ventrilo\",\"ves\",\"view-source\",\"vnc\",\"vscode\",\"vscode-insiders\",\"vsls\",\"w3\",\"wcr\",\"web3\",\"webcal\",\"wifi\",\"ws\",\"wss\",\"wtai\",\"wyciwyg\",\"xcon\",\"xcon-userid\",\"xfire\",\"xmlrpc.beep\",\"xmlrpc.beeps\",\"xmpp\",\"xri\",\"ymsgr\",\"z39.50r\",\"z39.50s\"]\n", "/**\n * file-reader.js\n */\n\nconst { FileReader } = window;\n\nexport {\n  FileReader\n};\n", "/**\n * uri-util.js\n */\n\n/* shared */\nimport textChars from '../lib/file/text-chars.json' assert { type: 'json' };\nimport uriSchemes from '../lib/iana/uri-schemes.json' assert { type: 'json' };\nimport { getType, isString } from './common.js';\nimport { FileReader } from './file-reader.js';\n\n/* constants */\nconst HEX = 16;\nconst REG_BASE64 = /^[\\w+/\\-=]+$/;\nconst REG_END_COLON = /:$/;\nconst REG_NUM_DECI = /^\\d+/;\nconst REG_NUM_HEAD = /#x?$/;\nconst REG_NUM_HEAD_ASCII = /^#(?:x(?:00)?[2-7]|\\d)/;\nconst REG_NUM_HEX = /^x[\\dA-F]+/i;\nconst REG_NUM_REF = /&#(x(?:00)?[\\dA-F]{2}|0?\\d{1,3});?/gi;\nconst REG_SCHEME = /^[a-z][\\da-z+\\-.]*$/;\nconst REG_SCHEME_CUSTOM = /^(?:ext|web)\\+[a-z]+$/;\nconst REG_SCRIPT = /(?:java|vb)script/;\nconst REG_URL_ENC = /^%[\\dA-F]{2}$/i;\n\n/**\n * get URL encoded string\n *\n * @param {string} str - string\n * @returns {string} - URL encoded string\n */\nexport const getURLEncodedString = str => {\n  if (!isString(str)) {\n    throw new TypeError(`Expected String but got ${getType(str)}.`);\n  }\n  const chars = [];\n  for (const ch of str) {\n    chars.push(`%${ch.charCodeAt(0).toString(HEX).toUpperCase()}`);\n  }\n  return chars.join('');\n};\n\n/**\n * escape URL encoded HTML special chars\n *\n * @param {string} ch - URL encoded (percent encoded) char\n * @returns {string} - escaped URL encoded HTML special char / URL encoded char\n */\nexport const escapeURLEncodedHTMLChars = ch => {\n  if (isString(ch) && REG_URL_ENC.test(ch)) {\n    ch = ch.toUpperCase();\n  }\n  const [amp, num, lt, gt, quot, apos] =\n    ['&', '#', '<', '>', '\"', \"'\"].map(getURLEncodedString);\n  let escapedChar;\n  if (ch === amp) {\n    escapedChar = `${amp}amp;`;\n  } else if (ch === lt) {\n    escapedChar = `${amp}lt;`;\n  } else if (ch === gt) {\n    escapedChar = `${amp}gt;`;\n  } else if (ch === quot) {\n    escapedChar = `${amp}quot;`;\n  } else if (ch === apos) {\n    escapedChar = `${amp}${num}39;`;\n  } else {\n    escapedChar = ch;\n  }\n  return escapedChar;\n};\n\n/**\n * parse base64 encoded data\n *\n * @param {string} data - base64 encoded data\n * @returns {string} - parsed text data / base64 encoded data if binary\n */\nexport const parseBase64 = data => {\n  if (!isString(data)) {\n    throw new TypeError(`Expected String but got ${getType(data)}.`);\n  } else if (!REG_BASE64.test(data)) {\n    throw new Error(`Invalid base64 data: ${data}`);\n  }\n  const bin = atob(data);\n  const uint8arr = Uint8Array.from([...bin].map(c => c.charCodeAt(0)));\n  const textCharCodes = new Set(textChars);\n  let parsedData;\n  if (uint8arr.every(c => textCharCodes.has(c))) {\n    parsedData = bin.replace(/\\s/g, getURLEncodedString);\n  } else {\n    parsedData = data;\n  }\n  return parsedData;\n};\n\n/**\n * parse URL encoded numeric character references in the range 0x00 to 0xFF\n *\n * @param {string} str - string\n * @param {number} [nest] - nest level\n * @returns {string} - parsed string\n */\nexport const parseURLEncodedNumCharRef = (str, nest = 0) => {\n  if (!isString(str)) {\n    throw new TypeError(`Expected String but got ${getType(str)}.`);\n  }\n  if (!Number.isInteger(nest)) {\n    throw new TypeError(`Expected Number but got ${getType(nest)}.`);\n  } else if (nest > HEX) {\n    throw new Error('Character references nested too deeply.');\n  }\n  let res = decodeURIComponent(str);\n  if (/&#/.test(res)) {\n    const textCharCodes = new Set(textChars);\n    const items = [...res.matchAll(REG_NUM_REF)].reverse();\n    for (const item of items) {\n      const [numCharRef, value] = item;\n      let num;\n      if (REG_NUM_HEX.test(value)) {\n        num = parseInt(`0${value}`, HEX);\n      } else if (REG_NUM_DECI.test(value)) {\n        num = parseInt(value);\n      }\n      if (Number.isInteger(num)) {\n        const { index } = item;\n        const [preNum, postNum] = [\n          res.substring(0, index),\n          res.substring(index + numCharRef.length)\n        ];\n        if (textCharCodes.has(num)) {\n          res = `${preNum}${String.fromCharCode(num)}${postNum}`;\n          if (REG_NUM_HEAD.test(preNum) || REG_NUM_HEAD_ASCII.test(postNum)) {\n            res = parseURLEncodedNumCharRef(res, ++nest);\n          }\n        } else if (num < HEX * HEX) {\n          res = `${preNum}${postNum}`;\n        }\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * create data URL from blob\n *\n * @param {object} blob - blob\n * @returns {Promise.<?string>} - data URL\n */\nexport const createDataURLFromBlob = blob => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.addEventListener('error', () => reject(reader.error));\n  reader.addEventListener('abort', () => resolve(reader.result));\n  reader.addEventListener('load', () => resolve(reader.result));\n  reader.readAsDataURL(blob);\n});\n\n/**\n * URI schemes\n *\n */\nexport class URISchemes {\n  /* private fields */\n  #schemes;\n\n  /**\n   * construct\n   */\n  constructor() {\n    this.#schemes = new Set(uriSchemes);\n  }\n\n  /**\n   * get schemes\n   *\n   * @see {@link https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml}\n   *      - Historical schemes omitted\n   *      - 'moz-extension' scheme added\n   * @returns {Array.<string>} - array of schemes\n   */\n  get() {\n    return [...this.#schemes];\n  }\n\n  /**\n   * has scheme\n   *\n   * @param {string} scheme - scheme\n   * @returns {boolean} - result\n   */\n  has(scheme) {\n    return this.#schemes.has(scheme);\n  }\n\n  /**\n   * add scheme\n   * NOTE: `javascript` and/or `vbscript` schemes can not be registered\n   *\n   * @param {string} scheme - scheme\n   * @returns {Array.<string>} - array of schemes\n   */\n  add(scheme) {\n    if (!isString(scheme)) {\n      throw new TypeError(`Expected String but got ${getType(scheme)}.`);\n    } else if (REG_SCRIPT.test(scheme) || !REG_SCHEME.test(scheme)) {\n      throw new Error(`Invalid scheme: ${scheme}`);\n    }\n    this.#schemes.add(scheme);\n    return [...this.#schemes];\n  }\n\n  /**\n   * remove scheme\n   *\n   * @param {string} scheme - scheme\n   * @returns {boolean} - result\n   */\n  remove(scheme) {\n    return this.#schemes.delete(scheme);\n  }\n\n  /**\n   * verify URI\n   *\n   * @param {string} uri - URI\n   * @returns {boolean} - result\n   */\n  verify(uri) {\n    let res;\n    if (isString(uri)) {\n      try {\n        const { protocol } = new URL(uri);\n        const scheme = protocol.replace(REG_END_COLON, '');\n        const schemeParts = scheme.split('+');\n        res = (!REG_SCRIPT.test(scheme) && REG_SCHEME_CUSTOM.test(scheme)) ||\n              schemeParts.every(s => this.#schemes.has(s));\n      } catch (e) {\n        res = false;\n      }\n    }\n    return !!res;\n  }\n};\n", "/**\n * sanitizer.js\n */\n\n/* shared */\nimport domPurify from './dompurify.js';\nimport { getType, isString } from './common.js';\nimport {\n  createDataURLFromBlob, escapeURLEncodedHTMLChars, getURLEncodedString,\n  parseBase64, parseURLEncodedNumCharRef, URISchemes\n} from './uri-util.js';\n\n/* constants */\nconst HEX = 16;\nconst REG_DATA_URL = /data:[\\w#&+\\-./;=]*,/;\nconst REG_DATA_URL_BASE64 = /data:[\\w#&+\\-./;=]*base64,[\\w+/\\-=]+/i;\nconst REG_DATA_URL_G = /data:[\\w#&+\\-./;=]*,[^\"]+/g;\nconst REG_END_COLON = /:$/;\nconst REG_END_NUM = /(?:#|%23)$/;\nconst REG_END_QUEST = /(?<!(?:#|%23).*)(?:\\?|%3F)$/;\nconst REG_HTML_SP = /[<>\"'\\s]/g;\nconst REG_HTML_URL_ENC = /%(?:2(?:2|7)|3(?:C|E))/g;\nconst REG_HTML_URL_ENC_QUOT = /%(?:2(?:2|7)|3(?:C|E))|[\"']/;\nconst REG_MIME_DOM =\n  /^(?:text\\/(?:ht|x)ml|application\\/(?:[\\w#&\\-.;]+\\+)?xml|image\\/svg\\+xml)/;\nconst REG_SCRIPT_BLOB = /(?:java|vb)script|blob/;\nconst REG_URL_ENC_AMP = /%26/g;\n\n/* typedef */\n/**\n * @typedef {object} ParsedURL - object with additional props based on URL API\n * @property {string} input - URL input\n * @property {boolean} valid - is valid URI\n * @property {object} [data] - parsed result of data URL, `null`able\n * @property {string} [data.mime] - MIME type\n * @property {boolean} [data.base64] - is base64 encoded\n * @property {string} [data.data] - data part of the data URL\n * @property {string} [href] - sanitized URL input\n * @property {string} [origin] - scheme, domain and port of the sanitized URL\n * @property {string} [protocol] -  protocol scheme of the sanitized URL\n * @property {string} [username] - username specified before the domain name\n * @property {string} [password] - password specified before the domain name\n * @property {string} [host] - domain and port of the sanitized URL\n * @property {string} [hostname] - domain of the sanitized URL\n * @property {string} [port] - port number of the sanitized URL\n * @property {string} [pathname] - path of the sanitized URL\n * @property {string} [search] - query string of the sanitized URL\n * @property {string} [hash] - fragment identifier of the sanitized URL\n */\n\n/* URL sanitizer */\nexport class URLSanitizer extends URISchemes {\n  /* private fields */\n  #nest;\n  #recurse;\n\n  /**\n   * construct\n   */\n  constructor() {\n    super();\n    this.#nest = 0;\n    this.#recurse = new Set();\n  }\n\n  /**\n   * replace matched data URLs\n   *\n   * @param {string} data - data URL\n   * @returns {string} - replaced data URL\n   */\n  replace(data) {\n    if (!isString(data)) {\n      throw new TypeError(`Expected String but got ${getType(data)}.`);\n    }\n    let replacedData = data;\n    if (REG_DATA_URL.test(replacedData)) {\n      const matchedDataUrls = replacedData.matchAll(REG_DATA_URL_G);\n      const items = [...matchedDataUrls].reverse();\n      for (const item of items) {\n        let [dataUrl] = item;\n        if (REG_DATA_URL_BASE64.test(dataUrl)) {\n          [dataUrl] = REG_DATA_URL_BASE64.exec(dataUrl);\n        }\n        this.#nest++;\n        this.#recurse.add(dataUrl);\n        const parsedDataUrl = this.sanitize(dataUrl, {\n          allow: ['data']\n        });\n        const { index } = item;\n        const [preDataUrl, postDataUrl] = [\n          replacedData.substring(0, index),\n          replacedData.substring(index + dataUrl.length)\n        ];\n        if (parsedDataUrl) {\n          replacedData = `${preDataUrl}${parsedDataUrl}${postDataUrl}`;\n        } else {\n          replacedData = `${preDataUrl}${postDataUrl}`;\n        }\n      }\n    }\n    return replacedData;\n  }\n\n  /**\n   * purify URL encoded DOM\n   *\n   * @param {string} dom - DOM string\n   * @returns {string} - purified DOM string\n   */\n  purify(dom) {\n    if (!isString(dom)) {\n      throw new TypeError(`Expected String but got ${getType(dom)}.`);\n    }\n    let purifiedDom = domPurify.sanitize(decodeURIComponent(dom));\n    if (purifiedDom && REG_DATA_URL.test(purifiedDom)) {\n      purifiedDom = this.replace(purifiedDom);\n    }\n    purifiedDom =\n      purifiedDom.replace(REG_END_NUM, '').replace(REG_END_QUEST, '');\n    return encodeURI(purifiedDom);\n  };\n\n  /**\n   * sanitize URL\n   * NOTE: `data` and `file` schemes must be explicitly allowed\n   *       `blob` URLs should be converted to `data` URLs\n   *       `javascript` and `vbscript` schemes can not be allowed\n   *\n   * @param {string} url - URL\n   * @param {object} [opt] - options\n   * @param {Array.<string>} [opt.allow] - array of allowed schemes\n   * @param {Array.<string>} [opt.deny] - array of denied schemes\n   * @param {Array.<string>} [opt.only] - array of specific schemes to allow\n   * @param {boolean} [opt.remove] - remove tag and/or quote and the rest\n   * @returns {?string} - sanitized URL\n   */\n  sanitize(url, opt) {\n    if (this.#nest > HEX) {\n      this.#nest = 0;\n      throw new Error('Data URLs nested too deeply.');\n    }\n    const { allow, deny, only, remove } = opt ?? {};\n    const schemeMap = new Map([\n      ['blob', false],\n      ['data', false],\n      ['file', false],\n      ['javascrpt', false],\n      ['vbscript', false]\n    ]);\n    let restrictScheme = false;\n    if (Array.isArray(only) && only.length) {\n      const schemes = super.get();\n      for (const item of schemes) {\n        schemeMap.set(item, false);\n      }\n      const items = Object.values(only);\n      for (let item of items) {\n        if (isString(item)) {\n          item = item.trim();\n          if (!REG_SCRIPT_BLOB.test(item)) {\n            if (super.has(item)) {\n              schemeMap.set(item, true);\n            } else {\n              try {\n                super.add(item);\n              } catch (e) {\n                // fall through\n              }\n              if (super.has(item)) {\n                schemeMap.set(item, true);\n              }\n            }\n            if (!restrictScheme && schemeMap.has(item)) {\n              restrictScheme = schemeMap.get(item);\n            }\n          }\n        }\n      }\n    } else {\n      if (Array.isArray(allow) && allow.length) {\n        const items = Object.values(allow);\n        for (let item of items) {\n          if (isString(item)) {\n            item = item.trim();\n            if (!REG_SCRIPT_BLOB.test(item)) {\n              if (super.has(item)) {\n                schemeMap.set(item, true);\n              } else {\n                try {\n                  super.add(item);\n                } catch (e) {\n                  // fall through\n                }\n                if (super.has(item)) {\n                  schemeMap.set(item, true);\n                }\n              }\n            }\n          }\n        }\n      }\n      if (Array.isArray(deny) && deny.length) {\n        const items = Object.values(deny);\n        for (let item of items) {\n          if (isString(item)) {\n            item = item.trim();\n            if (item) {\n              schemeMap.set(item, false);\n            }\n          }\n        }\n      }\n    }\n    let sanitizedUrl;\n    if (super.verify(url)) {\n      const { hash, href, pathname, protocol, search } = new URL(url);\n      const scheme = protocol.replace(REG_END_COLON, '');\n      const schemeParts = scheme.split('+');\n      let bool;\n      if (restrictScheme) {\n        bool = schemeParts.every(s => schemeMap.get(s));\n      } else {\n        for (const [key, value] of schemeMap.entries()) {\n          bool = value || (scheme !== key && schemeParts.every(s => s !== key));\n          if (!bool) {\n            break;\n          }\n        }\n      }\n      if (bool) {\n        const isDataUrl = schemeParts.includes('data');\n        let finalize;\n        let urlToSanitize = href;\n        if (isDataUrl) {\n          const [mediaType, ...dataParts] = pathname.split(',');\n          const data = `${dataParts.join(',')}${search}${hash}`;\n          const mediaTypes = mediaType.split(';');\n          const isBase64 = mediaTypes[mediaTypes.length - 1] === 'base64';\n          let parsedData = data;\n          if (isBase64) {\n            parsedData = parseBase64(data);\n          }\n          try {\n            const decodedData = parseURLEncodedNumCharRef(parsedData).trim();\n            const { protocol: dataScheme } = new URL(decodedData);\n            const dataSchemeParts =\n              dataScheme.replace(REG_END_COLON, '').split('+');\n            if (dataSchemeParts.some(s => REG_SCRIPT_BLOB.test(s))) {\n              urlToSanitize = '';\n            }\n          } catch (e) {\n            // fall through\n          }\n          const containsDataUrl = REG_DATA_URL.test(parsedData);\n          if (parsedData !== data || containsDataUrl) {\n            if (containsDataUrl) {\n              parsedData = this.replace(parsedData);\n            } else if (this.#recurse.has(url)) {\n              this.#recurse.delete(url);\n            } else {\n              finalize = true;\n            }\n          } else if (this.#recurse.has(url)) {\n            this.#recurse.delete(url);\n          } else {\n            finalize = true;\n          }\n          if (!mediaType || REG_MIME_DOM.test(mediaType)) {\n            parsedData = this.purify(parsedData);\n          }\n          if (urlToSanitize && parsedData) {\n            if (isBase64 && parsedData !== data) {\n              mediaTypes.pop();\n            }\n            urlToSanitize = `${scheme}:${mediaTypes.join(';')},${parsedData}`;\n          } else {\n            urlToSanitize = '';\n          }\n        } else {\n          finalize = true;\n        }\n        if (!isDataUrl && remove && REG_HTML_URL_ENC_QUOT.test(urlToSanitize)) {\n          const item = REG_HTML_URL_ENC_QUOT.exec(urlToSanitize);\n          const { index } = item;\n          urlToSanitize = urlToSanitize.substring(0, index);\n        }\n        if (urlToSanitize) {\n          sanitizedUrl = urlToSanitize\n            .replace(REG_HTML_SP, getURLEncodedString)\n            .replace(REG_URL_ENC_AMP, escapeURLEncodedHTMLChars);\n          if (finalize) {\n            if (!isDataUrl) {\n              sanitizedUrl = sanitizedUrl\n                .replace(REG_HTML_URL_ENC, escapeURLEncodedHTMLChars);\n            }\n            this.#nest = 0;\n          }\n        } else {\n          this.#nest = 0;\n        }\n      }\n    }\n    return sanitizedUrl || null;\n  }\n\n  /**\n   * parse sanitized URL\n   *\n   * @param {string} url - URL\n   * @param {object} [opt] - options\n   * @param {Array.<string>} [opt.allow] - array of allowed schemes\n   * @param {Array.<string>} [opt.deny] - array of denied schemes\n   * @param {Array.<string>} [opt.only] - array of specific schemes to allow\n   * @param {boolean} [opt.remove] - remove tag and/or quote and the rest\n   * @returns {ParsedURL} - result with additional props based on URL API\n   */\n  parse(url, opt) {\n    if (!isString(url)) {\n      throw new TypeError(`Expected String but got ${getType(url)}.`);\n    }\n    const parsedUrl = new Map([\n      ['input', url]\n    ]);\n    let sanitizedUrl;\n    if (this.verify(url)) {\n      const { protocol } = new URL(url);\n      if (protocol === 'blob:') {\n        sanitizedUrl = url;\n      } else {\n        sanitizedUrl = this.sanitize(url, opt ?? {\n          allow: ['data', 'file']\n        });\n      }\n    }\n    if (sanitizedUrl) {\n      const urlObj = new URL(sanitizedUrl);\n      const { pathname, protocol } = urlObj;\n      const schemeParts = protocol.replace(REG_END_COLON, '').split('+');\n      const isDataUrl = schemeParts.includes('data');\n      parsedUrl.set('valid', true);\n      if (isDataUrl) {\n        const dataUrl = new Map();\n        const [mediaType, ...dataParts] = pathname.split(',');\n        const data = `${dataParts.join(',')}`;\n        const mediaTypes = mediaType.split(';');\n        const isBase64 = mediaTypes[mediaTypes.length - 1] === 'base64';\n        if (isBase64) {\n          mediaTypes.pop();\n        }\n        dataUrl.set('mime', mediaTypes.join(';'));\n        dataUrl.set('base64', isBase64);\n        dataUrl.set('data', data);\n        parsedUrl.set('data', Object.fromEntries(dataUrl));\n      } else {\n        parsedUrl.set('data', null);\n      }\n      for (const key in urlObj) {\n        const value = urlObj[key];\n        if (isString(value)) {\n          parsedUrl.set(key, value);\n        }\n      }\n    } else {\n      parsedUrl.set('valid', false);\n    }\n    return Object.fromEntries(parsedUrl);\n  }\n};\n\n/* aliases and async wrappers */\n/* instance */\nconst urlSanitizer = new URLSanitizer();\n\n/**\n * sanitize URL async\n * NOTE: `blob`, `data` and `file` schemes must be explicitly allowed\n *       given a `blob` URL, returns a sanitized `data` URL\n *\n * @param {string} url - URL\n * @param {object} [opt] - options\n * @param {Array.<string>} [opt.allow] - array of allowed schemes\n * @param {Array.<string>} [opt.deny] - array of denied schemes\n * @param {Array.<string>} [opt.only] - array of specific schemes to allow\n * @param {boolean} [opt.remove] - remove tag and/or quote and the rest\n * @returns {Promise.<?string>} - sanitized URL\n */\nexport const sanitizeURL = async (url, opt = {\n  allow: [],\n  deny: [],\n  only: []\n}) => {\n  let res;\n  if (urlSanitizer.verify(url)) {\n    const { protocol } = new URL(url);\n    if (protocol === 'blob:') {\n      const { allow, deny, only } = opt;\n      if ((Array.isArray(allow) && allow.includes('blob') &&\n           !(Array.isArray(deny) && deny.includes('blob'))) ||\n          (Array.isArray(only) && only.includes('blob'))) {\n        let data;\n        try {\n          data =\n            await fetch(url).then(r => r.blob()).then(createDataURLFromBlob);\n        } catch (e) {\n          // fall through\n        }\n        if (data) {\n          if (Array.isArray(only)) {\n            if (!only.includes('data')) {\n              only.push('data');\n            }\n          } else if (Array.isArray(allow)) {\n            if (!allow.includes('data')) {\n              allow.push('data');\n            }\n            if (Array.isArray(deny) && deny.includes('data')) {\n              const i = deny.indexOf('data');\n              deny.splice(i, 1);\n            }\n          }\n          res = urlSanitizer.sanitize(data, opt);\n        }\n      }\n      URL.revokeObjectURL(url);\n    } else {\n      res = urlSanitizer.sanitize(url, opt);\n    }\n  }\n  return res || null;\n};\n\n/**\n * sanitize URL sync\n * NOTE: `data` and `file` schemes must be explicitly allowed\n *       `blob` scheme returns `null`\n *\n * @param {string} url - URL\n * @param {object} [opt] - options\n * @param {Array.<string>} [opt.allow] - array of allowed schemes\n * @param {Array.<string>} [opt.deny] - array of denied schemes\n * @param {Array.<string>} [opt.only] - array of specific schemes to allow\n * @param {boolean} [opt.remove] - remove tag and/or quote and the rest\n * @returns {?string} - sanitized URL\n */\nexport const sanitizeURLSync = (url, opt) => {\n  let res;\n  if (urlSanitizer.verify(url)) {\n    const { protocol } = new URL(url);\n    if (protocol === 'blob:') {\n      URL.revokeObjectURL(url);\n    } else {\n      res = urlSanitizer.sanitize(url, opt);\n    }\n  }\n  return res || null;\n};\n\n/**\n * parse URL async\n *\n * @param {string} url - URL\n * @returns {Promise.<ParsedURL>} - result\n */\nexport const parseURL = async url => {\n  const res = urlSanitizer.parse(url);\n  return res;\n};\n\n/**\n * parse URL sync\n *\n * @param {string} url - URL\n * @returns {ParsedURL} - result\n */\nexport const parseURLSync = url => urlSanitizer.parse(url);\n\n/**\n * is URI async\n *\n * @param {string} uri - URI\n * @returns {Promise.<boolean>} - result\n */\nexport const isURI = async uri => {\n  const res = urlSanitizer.verify(uri);\n  return res;\n};\n\n/**\n * is URI sync\n *\n * @param {string} uri - URI\n * @returns {boolean} - result\n */\nexport const isURISync = uri => urlSanitizer.verify(uri);\n\n/* export instance */\nexport {\n  urlSanitizer as default\n};\n"],
  "mappings": "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",
  "names": ["DOMPurify", "getType", "o", "isString", "text_chars_default", "uri_schemes_default", "FileReader", "HEX", "REG_BASE64", "REG_END_COLON", "REG_NUM_DECI", "REG_NUM_HEAD", "REG_NUM_HEAD_ASCII", "REG_NUM_HEX", "REG_NUM_REF", "REG_SCHEME", "REG_SCHEME_CUSTOM", "REG_SCRIPT", "REG_URL_ENC", "getURLEncodedString", "str", "isString", "getType", "chars", "ch", "escapeURLEncodedHTMLChars", "amp", "num", "lt", "gt", "quot", "apos", "escapedChar", "parseBase64", "data", "bin", "uint8arr", "c", "textCharCodes", "text_chars_default", "parsedData", "parseURLEncodedNumCharRef", "nest", "res", "items", "item", "numCharRef", "value", "index", "preNum", "postNum", "createDataURLFromBlob", "blob", "resolve", "reject", "reader", "FileReader", "URISchemes", "#schemes", "uri_schemes_default", "scheme", "uri", "protocol", "schemeParts", "s", "HEX", "REG_DATA_URL", "REG_DATA_URL_BASE64", "REG_DATA_URL_G", "REG_END_COLON", "REG_END_NUM", "REG_END_QUEST", "REG_HTML_SP", "REG_HTML_URL_ENC", "REG_HTML_URL_ENC_QUOT", "REG_MIME_DOM", "REG_SCRIPT_BLOB", "REG_URL_ENC_AMP", "URLSanitizer", "URISchemes", "#nest", "#recurse", "data", "isString", "getType", "replacedData", "items", "item", "dataUrl", "parsedDataUrl", "index", "preDataUrl", "postDataUrl", "dom", "purifiedDom", "DOMPurify", "url", "opt", "allow", "deny", "only", "remove", "schemeMap", "restrictScheme", "schemes", "sanitizedUrl", "hash", "href", "pathname", "protocol", "search", "scheme", "schemeParts", "bool", "s", "key", "value", "isDataUrl", "finalize", "urlToSanitize", "mediaType", "dataParts", "mediaTypes", "isBase64", "parsedData", "parseBase64", "decodedData", "parseURLEncodedNumCharRef", "dataScheme", "containsDataUrl", "getURLEncodedString", "escapeURLEncodedHTMLChars", "parsedUrl", "urlObj", "urlSanitizer", "sanitizeURL", "res", "r", "createDataURLFromBlob", "i", "sanitizeURLSync", "parseURL", "parseURLSync", "isURI", "uri", "isURISync"]
}
