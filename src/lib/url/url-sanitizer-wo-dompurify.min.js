var{DOMPurify:H}=window;var g=t=>Object.prototype.toString.call(t).slice(8,-1),d=t=>typeof t=="string"||t instanceof String;var z=[7,8,9,10,11,12,13,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255];var F=["aaa","aaas","about","acap","acct","acd","acr","adiumxtra","adt","afp","afs","aim","amss","android","appdata","apt","ar","ark","attachment","aw","barion","beshare","bitcoin","bitcoincash","blob","bolo","browserext","cabal","calculator","callto","cap","cast","casts","chrome","chrome-extension","cid","coap","coaps","com-eventbrite-attendee","content","content-type","crid","cstr","cvs","dab","dat","data","dav","diaspora","dict","did","dis","dlna-playcontainer","dlna-playsingle","dns","dntp","doi","dpp","drm","dtmi","dtn","dvb","dvx","dweb","ed2k","eid","elsi","embedded","ens","ethereum","example","facetime","feed","feedready","fido","file","finger","first-run-pen-experience","fish","fm","ftp","fuchsia-pkg","geo","gg","git","gitoid","gizmoproject","go","gopher","graph","gtalk","h323","ham","hcap","hcp","http","https","hxxp","hxxps","hydrazone","hyper","iax","icap","icon","im","imap","info","iotdisco","ipfs","ipn","ipns","ipp","ipps","irc","irc6","ircs","iris","iris.beep","iris.lwz","iris.xpc","iris.xpcs","isostore","itms","jabber","jar","jms","keyparc","lastfm","lbry","ldap","ldaps","leaptofrogans","lorawan","lpa","lvlt","magnet","mailto","maps","market","matrix","message","microsoft.windows.camera","microsoft.windows.camera.multipicker","microsoft.windows.camera.picker","mid","mms","mongodb","moz","moz-extension","ms-access","ms-appinstaller","ms-browser-extension","ms-calculator","ms-drive-to","ms-enrollment","ms-excel","ms-eyecontrolspeech","ms-gamebarservices","ms-gamingoverlay","ms-getoffice","ms-help","ms-infopath","ms-inputapp","ms-lockscreencomponent-config","ms-media-stream-id","ms-meetnow","ms-mixedrealitycapture","ms-mobileplans","ms-newsandinterests","ms-officeapp","ms-people","ms-powerpoint","ms-project","ms-publisher","ms-remotedesktop-launch","ms-restoretabcompanion","ms-screenclip","ms-screensketch","ms-search","ms-search-repair","ms-secondary-screen-controller","ms-secondary-screen-setup","ms-settings","ms-settings-airplanemode","ms-settings-bluetooth","ms-settings-camera","ms-settings-cellular","ms-settings-cloudstorage","ms-settings-connectabledevices","ms-settings-displays-topology","ms-settings-emailandaccounts","ms-settings-language","ms-settings-location","ms-settings-lock","ms-settings-nfctransactions","ms-settings-notifications","ms-settings-power","ms-settings-privacy","ms-settings-proximity","ms-settings-screenrotation","ms-settings-wifi","ms-settings-workplace","ms-spd","ms-stickers","ms-sttoverlay","ms-transit-to","ms-useractivityset","ms-virtualtouchpad","ms-visio","ms-walk-to","ms-whiteboard","ms-whiteboard-cmd","ms-word","msnim","msrp","msrps","mss","mt","mtqp","mumble","mupdate","mvn","news","nfs","ni","nih","nntp","notes","num","ocf","oid","onenote","onenote-cmd","opaquelocktoken","openpgp4fpr","otpauth","palm","paparazzi","payment","payto","pkcs11","platform","pop","pres","proxy","psyc","pttp","pwid","qb","query","quic-transport","redis","rediss","reload","res","resource","rmi","rsync","rtmfp","rtmp","rtsp","rtsps","rtspu","sarif","secondlife","secret-token","service","session","sftp","sgn","shc","sieve","simpleledger","simplex","sip","sips","skype","smb","smp","sms","smtp","snmp","soap.beep","soap.beeps","soldat","spiffe","spotify","ssb","ssh","starknet","steam","stun","stuns","submit","svn","swh","swid","swidpath","tag","taler","teamspeak","tel","teliaeid","telnet","tftp","things","thismessage","tip","tn3270","tool","turn","turns","tv","udp","unreal","urn","ut2004","uuid-in-package","v-event","vemmi","ventrilo","ves","view-source","vnc","vscode","vscode-insiders","vsls","w3","wcr","web3","webcal","wifi","ws","wss","wtai","wyciwyg","xcon","xcon-userid","xfire","xmlrpc.beep","xmlrpc.beeps","xmpp","xri","ymsgr","z39.50r","z39.50s"];var{FileReader:B}=window;var v=16,ee=/^[\da-z+/\-_=]+$/i,te=/:$/,se=/^\d+/,re=/#x?$/,ie=/^#(?:x(?:00)?[2-7]|\d)/,ae=/^x[\dA-F]+/i,oe=/&#(x(?:00)?[\dA-F]{2}|0?\d{1,3});?/ig,ne=/^[a-z][\da-z+\-.]*$/,ce=/^(?:ext|web)\+[a-z]+$/,q=/(?:java|vb)script/,pe=/^%[\dA-F]{2}$/i,A=t=>{if(!d(t))throw new TypeError(`Expected String but got ${g(t)}.`);let e=[];for(let s of t)e.push(`%${s.charCodeAt(0).toString(v).toUpperCase()}`);return e.join("")},D=t=>{d(t)&&pe.test(t)&&(t=t.toUpperCase());let[e,s,r,o,a,c]=["&","#","<",">",'"',"'"].map(A),i;return t===e?i=`${e}amp;`:t===r?i=`${e}lt;`:t===o?i=`${e}gt;`:t===a?i=`${e}quot;`:t===c?i=`${e}${s}39;`:i=t,i},Y=t=>{if(d(t)){if(!ee.test(t))throw new Error(`Invalid base64 data: ${t}`)}else throw new TypeError(`Expected String but got ${g(t)}.`);let e=atob(t),s=Uint8Array.from([...e].map(a=>a.charCodeAt(0))),r=new Set(z),o;return s.every(a=>r.has(a))?o=e.replace(/\s/g,A):o=t,o},k=(t,e=0)=>{if(!d(t))throw new TypeError(`Expected String but got ${g(t)}.`);if(Number.isInteger(e)){if(e>v)throw new Error("Character references nested too deeply.")}else throw new TypeError(`Expected Number but got ${g(e)}.`);let s=decodeURIComponent(t);if(/&#/.test(s)){let r=new Set(z),o=[...s.matchAll(oe)].reverse();for(let a of o){let[c,i]=a,l;if(ae.test(i)?l=parseInt(`0${i}`,v):se.test(i)&&(l=parseInt(i)),Number.isInteger(l)){let{index:f}=a,[p,n]=[s.substring(0,f),s.substring(f+c.length)];r.has(l)?(s=`${p}${String.fromCharCode(l)}${n}`,(re.test(p)||ie.test(n))&&(s=k(s,++e))):l<v*v&&(s=`${p}${n}`)}}}return s},X=t=>new Promise((e,s)=>{let r=new B;r.addEventListener("error",()=>s(r.error)),r.addEventListener("abort",()=>e(r.result)),r.addEventListener("load",()=>e(r.result)),r.readAsDataURL(t)}),S=class{#e;constructor(){this.#e=new Set(F)}get(){return[...this.#e]}has(e){return this.#e.has(e)}add(e){if(d(e)){if(q.test(e)||!ne.test(e))throw new Error(`Invalid scheme: ${e}`)}else throw new TypeError(`Expected String but got ${g(e)}.`);return this.#e.add(e),[...this.#e]}remove(e){return this.#e.delete(e)}verify(e){let s;if(d(e))try{let{protocol:r}=new URL(e),o=r.replace(te,""),a=o.split("+");s=!q.test(o)&&ce.test(o)||a.every(c=>this.#e.has(c))}catch{s=!1}return!!s}};var le=16,M=/data:[^,]*,/,Q=/data:[^,]*;?base64,[\da-z+/\-_=]+/i,me=/data:[^,]*,[^"]+/g,j=/:$/,de=/(?:#|%23)$/,fe=/(?<!(?:#|%23).*)(?:\?|%3F)$/,he=/[<>"'\s]/g,ue=/%(?:2(?:2|7)|3(?:C|E))/g,J=/%(?:2(?:2|7)|3(?:C|E))+?/,ge=/^(?:text\/(?:ht|x)ml|application\/(?:xhtml\+)?xml|image\/svg\+xml)/,G=/(?:java|vb)script|blob/,ye=/%26/g,N=class extends S{#e;#t;constructor(){super(),this.#e=0,this.#t=new Set}replace(e){if(!d(e))throw new TypeError(`Expected String but got ${g(e)}.`);let s=e;if(M.test(s)){let o=[...s.matchAll(me)].reverse();for(let a of o){let[c]=a;Q.test(c)&&([c]=Q.exec(c)),this.#e++,this.#t.add(c);let i=this.sanitize(c,{allow:["data"]}),{index:l}=a,[f,p]=[s.substring(0,l),s.substring(l+c.length)];i?s=`${f}${i}${p}`:s=`${f}${p}`}}return s}purify(e){if(!d(e))throw new TypeError(`Expected String but got ${g(e)}.`);let s=H.sanitize(decodeURIComponent(e));return s&&M.test(s)&&(s=this.replace(s)),s=s.replace(de,"").replace(fe,""),encodeURI(s)}sanitize(e,s={allow:[],deny:[],only:[]}){if(this.#e>le)throw this.#e=0,new Error("Data URLs nested too deeply.");let{allow:r,deny:o,only:a,remove:c}=s??{},i=new Map([["blob",!1],["data",!1],["file",!1],["javascrpt",!1],["vbscript",!1]]),l=!1;if(Array.isArray(a)&&a.length){let p=super.get();for(let m of p)i.set(m,!1);let n=Object.values(a);for(let m of n)if(d(m)&&(m=m.trim(),!G.test(m))){if(super.has(m))i.set(m,!0);else{try{super.add(m)}catch{}super.has(m)&&i.set(m,!0)}!l&&i.has(m)&&(l=i.get(m))}}else{if(Array.isArray(r)&&r.length){let p=Object.values(r);for(let n of p)if(d(n)&&(n=n.trim(),!G.test(n)))if(super.has(n))i.set(n,!0);else{try{super.add(n)}catch{}super.has(n)&&i.set(n,!0)}}if(Array.isArray(o)&&o.length){let p=Object.values(o);for(let n of p)d(n)&&(n=n.trim(),n&&i.set(n,!1))}}let f;if(super.verify(e)){let{hash:p,href:n,pathname:m,protocol:U,search:w}=new URL(e),E=U.replace(j,""),C=E.split("+"),_;if(l)_=C.every(b=>i.get(b));else for(let[b,R]of i.entries())if(_=R||E!==b&&C.every(h=>h!==b),!_)break;if(_){let b=C.includes("data"),R,h=n;if(b){let[x,...T]=m.split(","),L=`${T.join(",")}${w}${p}`,$=x.split(";"),O=$[$.length-1]==="base64",u=L;O&&(u=Y(L));try{let P=k(u).trim(),{protocol:K}=new URL(P);K.replace(j,"").split("+").some(V=>G.test(V))&&(h="")}catch{}let I=M.test(u);u!==L||I?I?u=this.replace(u):this.#t.has(e)?this.#t.delete(e):R=!0:this.#t.has(e)?this.#t.delete(e):R=!0,(!x||ge.test(x))&&(u=this.purify(u)),h&&u?(O&&u!==L&&$.pop(),h=`${E}:${$.join(";")},${u}`):h=""}else R=!0;if(!b&&c&&J.test(h)){let x=J.exec(h),{index:T}=x;h=h.substring(0,T)}h?(f=h.replace(he,A).replace(ye,D),R&&(b||(f=f.replace(ue,D)),this.#e=0)):this.#e=0}}return f||null}parse(e,s){if(!d(e))throw new TypeError(`Expected String but got ${g(e)}.`);let r=new Map([["input",e]]),o;if(this.verify(e)){let{protocol:a}=new URL(e);a==="blob:"?o=e:o=this.sanitize(e,s??{allow:["data","file"]})}if(o){let a=new URL(o),{pathname:c,protocol:i}=a,f=i.replace(j,"").split("+").includes("data");if(r.set("valid",!0),f){let p=new Map,[n,...m]=c.split(","),U=`${m.join(",")}`,w=n.split(";"),E=w[w.length-1]==="base64";E&&w.pop(),p.set("mime",w.join(";")),p.set("base64",E),p.set("data",U),r.set("data",Object.fromEntries(p))}else r.set("data",null);for(let p in a){let n=a[p];d(n)&&r.set(p,n)}}else r.set("valid",!1);return Object.fromEntries(r)}},y=new N,be=async(t,e={allow:[],deny:[],only:[]})=>{let s;if(y.verify(t)){let{protocol:r}=new URL(t);if(r==="blob:"){let{allow:o,deny:a,only:c}=e;if(Array.isArray(o)&&o.includes("blob")&&!(Array.isArray(a)&&a.includes("blob"))||Array.isArray(c)&&c.includes("blob")){let i;try{i=await fetch(t).then(l=>l.blob()).then(X)}catch{}if(i){if(Array.isArray(c))c.includes("data")||c.push("data");else if(Array.isArray(o)&&(o.includes("data")||o.push("data"),Array.isArray(a)&&a.includes("data"))){let l=a.indexOf("data");a.splice(l,1)}s=y.sanitize(i,e)}}URL.revokeObjectURL(t)}else s=y.sanitize(t,e)}return s||null},we=(t,e)=>{let s;if(y.verify(t)){let{protocol:r}=new URL(t);r==="blob:"?URL.revokeObjectURL(t):s=y.sanitize(t,e??{allow:[],deny:[],only:[]})}return s||null},Ee=async t=>y.parse(t),Re=t=>y.parse(t),xe=async t=>y.verify(t),ve=t=>y.verify(t);export{y as default,xe as isURI,ve as isURISync,Ee as parseURL,Re as parseURLSync,be as sanitizeURL,we as sanitizeURLSync};
/*!
 * URL Sanitizer
 *
 * @license MIT
 * @copyright asamuzaK (Kazz)
 * @see {@link https://github.com/asamuzaK/urlSanitizer/blob/main/LICENSE}
 */
//# sourceMappingURL=url-sanitizer-wo-dompurify.min.js.map
